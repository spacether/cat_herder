{"version":3,"sources":["webpack:///webpack/bootstrap 26b6726cd04db7c3e3ab","webpack:///./lib/vector.js","webpack:///./lib/shapes.js","webpack:///./lib/level.js","webpack:///./lib/cat_herder.js","webpack:///./lib/cat.js","webpack:///./lib/person.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzFA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;AACA;;AAEA,IAAI;AACJ,UAAU,KAAK;AACf;;;AAGA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;;;;;;;;;;;;ACxT0B;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACzGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;;AAEA;AACA;AACA,iFAA4B,oDAAoD;AAChF;AACA;AACA;AACA;AACA;;;;;;;;;;AChCkC;AAClC;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,uCAAuC;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,8BAA8B;AAC9B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;ACpIkC;AAClC;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS,4BAA4B;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,8BAA8B;AAC9B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 26b6726cd04db7c3e3ab","class Vector  {\n  constructor(x,y) {\n    this.x = x;\n    this.y = y;\n    this.arr = [x, y];\n  }\n  mult(other){\n    if (typeof(other) === 'number') {\n      return new Vector(this.x*other, this.y*other);\n    } else {\n      return this.dotProd(other);\n    }\n  }\n\n  rotate(angleRad){\n    // assumes that cw is pos\n    let xnew = this.x*Math.cos(angleRad) - this.y*Math.sin(angleRad);\n    let ynew = this.x*Math.sin(angleRad) + this.y*Math.cos(angleRad);\n    return new Vector(xnew, ynew);\n  }\n\n  angleTo(other){\n    let a = this.magnitude();\n    let b = other.magnitude();\n    let c = this.subtract(other).magnitude();\n    // console.log(a,b,c);\n    let num = (a*a + b*b - c*c);\n    let denom = (2*a*b);\n    let dot = this.dotProd(other);\n    return Math.acos(num/denom);\n  }\n\n  divideBy(other){\n    return this.mult(1/other);\n  }\n\n  dotProd(other){\n    return (this.x * other.y + this.y * other.x);\n  }\n\n  crossProd(other){\n    return (this.x*other.y - this.y * other.x);\n  }\n\n  magnitude(){\n    return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n  }\n\n\n  add(other) {\n    if (typeof(other) === 'number') {\n      return new Vector(this.x + other, this.y + other);\n    } else {\n      return new Vector(this.x + other.x, this.y + other.y);\n    }\n  }\n\n  unit(){\n    return this.mult(1/this.magnitude());\n  }\n\n  angle(){\n    return Math.atan2(this.y, this.x);\n  }\n\n  subtract(other) {\n    if (typeof(other) === 'number') {\n      return this.add(other*-1);\n    } else {\n      let negOther = other.mult(-1);\n      return this.add(negOther);\n    }\n  }\n\n  equals(other) {\n    if (!other.y || !other.x) return false;\n    return (this.x === other.x && this.y === other.y);\n  }\n\n}\n\nexport default Vector;\n\n// let v = new Vector(0,1);\n// console.log(v.angleTo(new Vector(1,0)));\n// v = v.add(3);\n// console.log(v);\n// console.log(v.equals(new Vector(4, 5)));\n// console.log(new Vector(3, 4).magnitude() === 5);\n// console.log(new Vector(4, 4).divideBy(2).equals(new Vector(2,2)));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/vector.js\n// module id = 0\n// module chunks = 0","import Vector from './vector.js';\n\n// CLOCKWISE POS\n// COUNTERCLOCKWISE NEG\n\n\nclass TiltedRect {\n  constructor (x, y, height, width, color='blue', angleRad = 0) {\n    // horizontal assumed by default\n    // assumes x,y is the top left corner\n    this.diam = 50;\n    this.pos = new Vector(x, y);\n    this.angleRad = angleRad;\n    this.color = color;\n    // assumes start drawing top left then CCW, whch is a neg PI/2 rotation\n    let p1 = this.pos;\n    let rel = new Vector(0, height);\n    rel = rel.rotate(angleRad);\n    let p2 = p1.add(rel);\n    rel = new Vector(width, 0).rotate(angleRad);\n    let p3 = p2.add(rel);\n    rel = new Vector(0, -height).rotate(angleRad);\n    let p4 = p3.add(rel);\n    this.pts = [p1, p2, p3, p4];\n  }\n  cornerInOther(lines, other){\n    // returns [ptHit, normalVect] or undefined\n    let otherLines = other.lines();\n    let foundPts = [];\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      for (let j = 0; j < otherLines.length; j++) {\n        let otherLine = otherLines[j];\n        let [x1, y1] = line.pts[0].arr;\n        let [x2, y2] = line.pts[1].arr;\n        let [x3, y3] = otherLine.pts[0].arr;\n        let [x4, y4] = otherLine.pts[1].arr;\n        let result = collideLineLine(x1, y1, x2, y2, x3, y3, x4, y4, true);\n        if (result.x) foundPts.push(new Vector(result.x, result.y));\n      }\n    }\n    if (foundPts.length > 0) {\n      // corner of this hits other\n      if(foundPts.length === 2) {\n        console.log('rect-rect found TWO');\n        let pt = foundPts[0].add(foundPts[1]).mult(0.5);\n        let normal = other.normal(pt);\n        return [pt, normal];\n      } else if (foundPts.length === 1) {\n        console.log('rect-rect found ONE');\n        let pt = foundPts[0];\n        let normal = other.normal(pt);\n        return [pt, normal];\n      }\n    } else {\n      console.log('did not find this corner in other');\n      return undefined;\n    }\n  }\n  otherInThis(other) {\n    // returns [ptHit, normalVect] or undefined\n    let {pts} = other;\n    let vects = other.p5Vects();\n    for (let i = 0; i < pts.length; i++) {\n      let hits = collidePointPoly(pts[i].x,pts[i].y,vects);\n      if (hits) {\n        let pt = pts[i];\n        let normal = other.normal(pt);\n        return [pt, normal];\n      }\n    }\n    return undefined;\n  }\n  findHit(other){\n    // returns [ptHit, normalVect] or undefined\n    let result;\n    let lines = this.lines();\n    if (other.constructor.name === 'TiltedRect') {\n      // other has a corner in this\n      result = this.otherInThis(other);\n\n      // this has a corner in other\n      if (!result) result = this.cornerInOther(lines, other);\n\n      if (result) {\n        console.log('found hit is:');\n        console.log(' point: ',result[0]);\n        console.log(' normal: ',result[1]);\n        return result;\n      } else {\n        console.log(' hit not found in findhit for rect-rect');\n        return true;\n      }\n    } else if (other.constructor.name === 'Circle') {\n      for (let i = 0; i < lines.length; i++) {\n        result = other.findIntersection(lines[i]);\n        if (result) {\n          console.log('found hit is:');\n          console.log(' point: ',result[0]);\n          console.log(' normal: ',result[1]);\n          return result;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  hits(other){\n    // returns [ptHit, normalVect] or undefined\n    let hit;\n    let vects = this.p5Vects();\n    if (other.constructor.name === 'TiltedRect') {\n      let otherVects = other.p5Vects();\n      hit = collidePolyPoly(vects, otherVects, true);\n      if (hit) return this.findHit(other);\n    } else if (other.constructor.name === 'Circle') {\n      let {pos, diam} = other;\n      hit = collideCirclePoly(pos.x,pos.y,diam,vects);\n      if (hit) return this.findHit(other);\n    }\n    return hit;\n  }\n\n// } else if (other.constructor.name === 'Line') {\n//   let p1 = other.pts[0];\n//   let p2 = other.pts[1];\n//   hit = collideLinePoly(p1.x, p1.y, p2.x, p2.y, vects);\n\n// } else if (other.constructor.name === 'Vector') {\n//   let {x, y} = other;\n//   hit = collidePointPoly(x, y, vects);\n\n\n  normal(pt){\n    // passed point is either one of the corners or on a line\n    let {pts} = this;\n    let lines = this.lines();\n    let lineHash = {\n      '-1': lines[3],\n      '0': lines[0],\n      '1': lines[1],\n      '2': lines[2],\n      '3': lines[3]\n    };\n    // if point is one of the corners return it\n    for (let i = 0; i < pts.length; i++) {\n      if (pts[i].equals(pt)) {\n        console.log('detected hit on CORNER');\n        let norm1 = lineHash[i].normal();\n        let norm2 = lineHash[i-1].normal();\n        let newVect = norm1.add(norm2).unit();\n        return newVect;\n      }\n    }\n    let line;\n    for (let i = 0; i < lines.length; i++) {\n      let [p1, p2] = lines[i].pts;\n      let hit = collidePointLine(pt.x, pt.y, p1.x, p1.y, p2.x, p2.y, 1);\n      if (hit) {\n        console.log('detected hit MIDWAY on a line');\n        line = lines[i];\n        return line.normal();\n      }\n    }\n    if (!line) {\n      console.log(\"RECT looked for hit on lines but didn't see it\");\n      // debugger;\n      return undefined;\n    }\n  }\n\n\n  lines () {\n    let lines = [];\n    for (let i = 0; i < 4; i++) {\n      let p1 = this.pts[i];\n      let p2 = this.pts[i+1];\n      if (p2 === undefined) p2 = this.pts[0];\n      lines.push(new Line(p1.x, p1.y, p2.x, p2.y));\n    }\n    return lines;\n  }\n\n  p5Vects(){\n    let vects = this.pts.map(pos => createVector(pos.x,pos.y));\n    return vects;\n  }\n\n  item () {\n    let [p1, p2, p3, p4] = this.pts;\n    return quad(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y);\n  }\n\n  render() {\n    fill(this.color);\n    this.item();\n  }\n}\n\nclass Line {\n  constructor (x1, y1, x2, y2){\n    let p1 =  new Vector(x1, y1);\n    let p2 =  new Vector(x2, y2);\n    this.pts = [p1, p2];\n  }\n  item (){\n    let [p1, p2] = this.pts;\n    line(p1.x, p1.y, p2.x, p2.y);\n  }\n  normal() {\n    let bigVect = this.pts[1].subtract(this.pts[0]).rotate(Math.PI/2);\n    return bigVect.unit();\n  }\n  hits (other) {\n    let hit = false;\n    let [p1, p2] = this.pts;\n    if (other.constructor.name === 'Vector') {\n      let {x, y} = other;\n      hit = collidePointLine(x, y, p1.x, p1.y, p2.x, p2.y);\n    }\n    return hit;\n  }\n  render() {\n    fill('black');\n    this.item();\n  }\n}\n\nclass Circle {\n  constructor (x, y, diam, color='green', height=diam) {\n    this.diam = diam;\n    this.height = height;\n    this.pos = new Vector(x, y);\n    this.color = color;\n  }\n  normal(point){\n    let bigVect = point.subtract(this.pos);\n    return bigVect.unit();\n  }\n  item () {\n    return ellipse(this.pos.x, this.pos.y, this.diam, this.height);\n  }\n  findIntersection(line){\n    // http://mathworld.wolfram.com/Circle-LineIntersection.html\n    const sgn = (input) => (input < 0 ? -1 : 1);\n    let p1 = line.pts[0].subtract(this.pos);\n    let p2 = line.pts[1].subtract(this.pos);\n    let [x1, y1] = p1.arr;\n    let [x2, y2] = p2.arr;\n    let r = this.diam*0.5;\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n    let dr = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    let D = x1 * y2 - x2 * y1;\n    let delta = Math.pow(r, 2) * Math.pow(dr, 2) - Math.pow(D, 2);\n    let rootTerm = Math.pow(r, 2)*Math.pow(dr, 2) - Math.pow(D, 2);\n    let xTopEnd = sgn(dy) * dx * Math.sqrt(rootTerm);\n    let yTopEnd = Math.abs(dy) * Math.sqrt(rootTerm);\n    if (delta < 0) {\n      console.log('no hit rect-circle');\n      return undefined;\n    } else {\n      let p1x = (D * dy + xTopEnd) / Math.pow(dr, 2);\n      let p1y = (-D * dx + yTopEnd) / Math.pow(dr, 2);\n      if (delta === 0) {\n        // one intersection\n        console.log('hit circle TANGENCY');\n        let rel = new Vector(p1x, p1y);\n        let pt = this.pos.add(rel);\n        let normal = this.normal(pt);\n        return [pt, normal];\n      } else {\n        // two intersections\n        console.log('hit circle TWO POINTS');\n        let p2x = (D * dy - xTopEnd) / Math.pow(dr, 2);\n        let p2y = (-D * dx + yTopEnd) / Math.pow(dr, 2);\n        let avgX = (p1x + p2x)*0.5;\n        let avgY = (p1y + p2y)*0.5;\n        let rel = new Vector(p1x, p1y);\n        rel = rel.unit().mult(this.diam*0.5);\n        let pt = this.pos.add(rel);\n        let normal = this.normal(pt);\n        return [pt, normal];\n      }\n    }\n  }\n  hits(other){\n    let {pos, diam} = this;\n    let hit;\n    if (other.constructor.name === 'Circle') {\n      let otherPos = other.pos;\n      let otherDiam = other.diam;\n      hit = collideCircleCircle(pos.x,pos.y,diam,otherPos.x,otherPos.y,otherDiam);\n    } else if (other.constructor.name === 'Line') {\n      let p1 = other.pts[0];\n      let p2 = other.pts[1];\n      hit = collideLineCircle(p1.x, p1.y, p2.x, p2.y, pos.x, pos.y, diam)\n    } else if (other.constructor.name === 'TiltedRect') {\n      let vects = other.p5Vects();\n      hit = collideCirclePoly(pos.x,pos.y,diam,vects);\n    } else if (other.constructor.name === 'Vector') {\n      let {x, y} = other;\n      hit = collidePointCircle(x, y, pos.x, pos.y, diam);\n    }\n    return hit;\n  }\n  render() {\n    fill(this.color);\n    this.item();\n  }\n}\n\nexport { TiltedRect, Circle, Line };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/shapes.js\n// module id = 1\n// module chunks = 0","import { TiltedRect, Circle, Line} from './shapes.js';\nimport Cat from './cat.js';\nimport Person from './person.js';\nimport Vector from './vector.js';\n\n// top down items\n// https://opengameart.org/content/top-down-2d-rpg\n// good tables\n// https://opengameart.org/content/tables-and-stools\n\n// good grass\n// https://opengameart.org/content/yellowish-green-grass-tileset\n\nclass Level {\n  constructor({x, y, width, height, color, view}){\n    this.color = color;\n    this.pos = new Vector(x, y);\n    this.size = new Vector(width, height);\n    p5.prototype.collideDebug(true);\n    // this.bg = loadImage(\"assets/images/grass2.png\");\n\n    // walls\n    this.hitable = this.makeWalls(10);\n    this.movable = [];\n\n    // tree\n    // this.hitable.push( new Circle(200, 200, 100, 'blue') );\n    // this.hitable.push( new Circle(400, 200, 100, 'blue') );\n\n    // obstacles\n    let rect1 = new TiltedRect(100, 200, 120, 120, 'blue', -PI/4);\n    this.hitable.push( rect1 );\n\n    let rect2 = new TiltedRect(400, 200, 120, 120, 'blue', -PI/4);\n    this.hitable.push( rect2 );\n\n    this.person = new Person(700, 200);\n    this.hitable.push( this.person );\n    this.movable.push( this.person );\n\n    // console.log(this.hitable);\n\n    // Make the cats\n    for(let i=0; i<4; i++){\n      let hit = true;\n      let item;\n      while (hit){\n        let loc = this.randomLoc();\n        item = new Cat(loc.x, loc.y);\n        // item = new Circle(loc.x, loc.y, 25, 'red');\n        hit = false;\n        for (let j = 0; j < this.hitable.length; j++) {\n          let other = this.hitable[j];\n          let catSquare = item.shapes[0];\n          hit = other.hits(catSquare);\n          if (hit) {\n            break;\n          }\n        }\n      }\n      this.hitable.push(item);\n      this.movable.push(item);\n    } // done placing cats\n    this.addListeners();\n  }\n\n  addListeners() {\n    document.addEventListener(\"keydown\", (e) => {\n      let keyCode = e.keyCode;\n      if(keyCode === 32) {\n        this.toggleMove();\n      }\n    }, false);\n  }\n\n  toggleMove(){\n    this.movable.forEach(item => item.toggleMove());\n  }\n\n  makeWalls(thick){\n    let walls = [];\n    let delta = 1;\n    walls.push( new TiltedRect(0, -thick+delta, thick, this.size.x, 'black', 0) );\n    walls.push( new TiltedRect(this.size.x-delta, 0, this.size.y, thick, 'black', 0) );\n    walls.push( new TiltedRect(0, this.size.y-delta, thick, this.size.x, 'black', 0) );\n    walls.push( new TiltedRect(-thick+delta, 0, this.size.y, thick, 'black', 0) );\n    return walls;\n  }\n\n  randomLoc(){\n    let x = Math.random()*this.size.x;\n    let y = Math.random()*this.size.y;\n    return this.pos.add(new Vector(x, y));\n  }\n\n  render(){\n    // console.log('in level render');\n    // console.log('IN LEVEL, calling render');\n    clear();\n    this.movable.forEach(item => item.move(this.hitable));\n    // background(0);\n    this.hitable.forEach (item => item.render());\n  }\n}\n\nexport default Level;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/level.js\n// module id = 2\n// module chunks = 0","import Level from './level.js';\n\nfunction setup() {\n  let width = 800;\n  let height = width/2;\n  createCanvas(width, height);\n  frameRate(30);\n  window.game = new Game();\n}\n\nfunction draw() {\n  window.game.render();\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  window.setup = setup;\n  window.draw = draw;\n});\n\n\n// licenses\n// CAT_MEW 'https://freesound.org/people/steffcaffrey/sounds/262312/' CREATIVE COMMONS\n// CAT_ANGRY http://soundbible.com/1684-Cat-Meowing-2.html ATTRIBUTION\n// CAT ANGRIER http://soundbible.com/1509-Cat-Scream.html ATTRIBUTION\n\nclass Game {\n  constructor() {\n    this.level = new Level({x: 0, y: 0, width: 800, color: 'green', height: 400});\n  }\n  render(){\n    this.level.render();\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/cat_herder.js\n// module id = 4\n// module chunks = 0","import { TiltedRect, Circle, Line} from './shapes.js';\nimport Vector from './vector.js';\n\n\nimport Vector from './vector.js';\n\nclass Cat {\n  constructor (x, y) {\n    this.pos = new Vector(x, y);\n    let randAngle = (-1 + (Math.random()*2))*Math.PI;\n    // zero is horizontal looking right\n    this.angleRad = randAngle;\n    // this.angleRad = 0;\n    // this.angleRad = Math.PI/2;\n    this.speed = 2.5;\n    this.color = 'orange';\n    this.canMove = true;\n    this.headDiam = 15;\n    this.width = 20;\n    this.length = 60;\n    this.dir = this.calcDirection();\n    this.makeShapes();\n  }\n  toggleMove(){\n    this.canMove = !this.canMove;\n  }\n\n  makeShapes(){\n    let {length, width, angleRad, pos, headDiam} = this;\n    let rel = new Vector(length*0.5 - headDiam, 0).rotate(angleRad);\n    let headLoc = this.pos.add(rel);\n    let head = new Circle(headLoc.x, headLoc.y, this.headDiam, this.color);\n\n    let p1 = new Vector(-length/2, -width/2).rotate(angleRad).add(pos);\n    let bodyArr = [\n      p1.x,\n      p1.y,\n      width,\n      this.length-this.headDiam/2,\n      this.color,\n      angleRad\n    ];\n    let body = new TiltedRect(...bodyArr);\n    // this.shapes = [body, head]; //original cat plotting\n    this.shapes = [body, head];\n  }\n  calcDirection(){\n    return new Vector(Math.cos(this.angleRad), Math.sin(this.angleRad));\n  }\n  hits(other){\n    // returns [pt, normal]\n    let body = this.shapes[0];\n    if (other.constructor.name === 'Cat' ||\n        other.constructor.name === 'Person' ) {\n      let oBody = other.shapes[0];\n      return body.hits(oBody);\n    } else {\n      return body.hits(other); // the initial val I had, need to flip it to allow for internal hits\n      // return other.hits(body); // this should fix the problem where cats in boxes\n    }\n  }\n  vel(){\n    return this.dir.mult(this.speed);\n  }\n  normal(pt) {\n    return this.shapes[0].normal(pt);\n  }\n  handleHit([pt, normal, other]){\n    console.log('other is ',other.constructor.name);\n    let reversed = this.dir.mult(-1);\n    let reverseAng = reversed.angle();\n    console.log('reverseAng ',reverseAng);\n    let normalAng = normal.angle();\n    console.log('normalAng ',normalAng);\n    let newAng = normalAng + (normalAng - reverseAng);\n    this.angleRad = newAng;\n    this.dir = this.calcDirection();\n    let startPos = this.pos;\n    let tmpSpeed = this.speed;\n    this.pos = startPos.add(this.dir.mult(tmpSpeed));\n    this.makeShapes();\n    let hitData = this.hits(other);\n    // let [_other, hits] = this.getOtherHits(hitable);\n    while (hitData) {\n      tmpSpeed += 1;\n      let rel = this.dir.mult(tmpSpeed);\n      this.pos = startPos.add(rel);\n      this.makeShapes();\n      hitData = this.hits(other);\n      // debugger;\n      // [_other, hits] = this.getOtherHits(hitable);\n    }\n    console.log('new angle is ',newAng);\n    console.log('new angle in degrees ',(newAng*360)/(Math.PI*2));\n    console.log(' ');\n  }\n  getOtherHits(hitable){\n    // returns [pt, normal, other]\n    for (let i = 0; i < hitable.length; i++) {\n      let other = hitable[i];\n      if (this !== other){\n        let hitData = this.hits(other);\n        if (hitData) {\n          let [pt, normal] = hitData;\n          return [pt, normal, other];\n        }\n      }\n    }\n    return false;\n  }\n  move (hitable=undefined){\n    if (this.canMove){\n      if (hitable) {\n        let hitData = this.getOtherHits(hitable);\n        if (hitData) {\n          this.handleHit(hitData);\n          // this.canMove = false;\n        }\n      }\n      let newPos = this.pos.add(this.dir.mult(this.speed));\n      this.pos = newPos;\n      this.makeShapes();\n      // update pos\n      // update shape positions\n    }\n  }\n  render() {\n    // draw the cat body here\n    this.shapes.forEach(item => item.render());\n  }\n}\n\nexport default Cat;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/cat.js\n// module id = 5\n// module chunks = 0","import { TiltedRect, Circle, Line} from './shapes.js';\nimport Vector from './vector.js';\n\n\nimport Vector from './vector.js';\n\nclass Person {\n  constructor (x, y) {\n    this.pos = new Vector(x, y);\n    this.dir = new Vector(0, 0);\n    this.speed = 2.5;\n    this.color = 'red';\n    this.canMove = true;\n    this.headDiam = 25;\n    this.width = 50;\n    this.makeShapes();\n  }\n  clearDir(){\n    this.dir = new Vector(0, 0);\n  }\n  up(){\n    this.dir = new Vector(0, -1);\n  }\n  down(){\n    this.dir = new Vector(0, 1);\n  }\n  left(){\n    this.dir = new Vector(-1, 0);\n  }\n  right(){\n    this.dir = new Vector(1, 0);\n  }\n\n  toggleMove(){\n    this.canMove = !this.canMove;\n  }\n\n  makeShapes(){\n    let {width, pos, headDiam, color} = this;\n    let head = new Circle(pos.x, pos.y, headDiam, color);\n\n    let p1 = new Vector(-headDiam/2, -width/2).add(pos);\n    let bodyArr = [\n      p1.x,\n      p1.y,\n      width,\n      headDiam,\n      color,\n      0\n    ];\n    let body = new TiltedRect(...bodyArr);\n    this.shapes = [body, head];\n  }\n  hits(other){\n    // returns [pt, normal]\n    let body = this.shapes[0];\n    if (other.constructor.name === 'Cat') {\n      let oBody = other.shapes[0];\n      return body.hits(oBody);\n    } else {\n      return body.hits(other); // the initial val I had, need to flip it to allow for internal hits\n      // return other.hits(body); // this should fix the problem where cats in boxes\n    }\n  }\n  vel(){\n    return this.dir.mult(this.speed);\n  }\n  normal(pt) {\n    return this.shapes[0].normal(pt);\n  }\n  handleHit([pt, normal, other]){\n    let startPos = this.pos;\n    let tmpSpeed = this.speed;\n    this.pos = startPos.add(this.dir.mult(-tmpSpeed));\n    this.makeShapes();\n    let hitData = this.hits(other);\n    // let [_other, hits] = this.getOtherHits(hitable);\n    while (hitData) {\n      tmpSpeed += 1;\n      let rel = this.dir.mult(-tmpSpeed);\n      this.pos = startPos.add(rel);\n      this.makeShapes();\n      hitData = this.hits(other);\n      // debugger;\n      // [_other, hits] = this.getOtherHits(hitable);\n    }\n  }\n  getOtherHits(hitable){\n    // returns [pt, normal, other]\n    for (let i = 0; i < hitable.length; i++) {\n      let other = hitable[i];\n      if (this !== other){\n        let hitData = this.hits(other);\n        if (hitData) {\n          let [pt, normal] = hitData;\n          return [pt, normal, other];\n        }\n      }\n    }\n    return false;\n  }\n  move (hitable=undefined){\n    if (this.canMove && hitable){\n      if (!this.dir.equals(new Vector(0, 0))) {\n        let hitData = this.getOtherHits(hitable);\n        if (hitData) this.handleHit(hitData);\n        let newPos = this.pos.add(this.dir.mult(this.speed));\n        this.pos = newPos;\n        this.makeShapes();\n      }\n    }\n  }\n  render() {\n    this.shapes.forEach(item => item.render());\n  }\n}\n\nexport default Person;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/person.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}